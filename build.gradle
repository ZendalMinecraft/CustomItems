import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
}

sourceCompatibility = '11'
targetCompatibility = '11'

java{
    withJavadocJar()
    withSourcesJar()
}


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ZendalMinecraft/CustomItems")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            def snapshotUrl = "https://repo.codemc.io/repository/maven-snapshots/"
            def releaseUrl = "https://repo.codemc.io/repository/maven-releases/"

            // You can also directly set the URL if you don't want to publish snapshots.
            url = project.version.endsWith("SNAPSHOT") ? snapshotUrl : releaseUrl

            // GRADLE_PROJECT_MAVEN_USERNAME and GRADLE_PROJECT_MAVEN_PASSWORD are the variables you defined in the previous section.
            def mavenUsername = System.getenv("JENKINS_USER")
            def mavenPassword = System.getenv("JENKINS_PASSWORD")

            credentials {
                username = mavenUsername
                password = mavenPassword
            }
        }
    }
    publications {
        library(MavenPublication) {
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'CodeMC'
        url = 'https://repo.codemc.org/repository/maven-public/'
    }

}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:16.0.2'
    compileOnly 'de.tr7zw:item-nbt-api-plugin:2.7.1'
    compileOnly 'org.projectlombok:lombok:1.18.16'


    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'


    testImplementation 'com.github.seeseemelk:MockBukkit-v1.16:1.0.0'
    testCompileOnly 'org.jetbrains:annotations:16.0.2'
    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}

test {
    useJUnitPlatform()
}


tasks.register("moveToServerFolder") {
    doLast {
        pathToServer = project.hasProperty('pathToServer') ? project.property('pathToServer') : 'nosuchgroup'
        print "Plugin location: " + pathToServer + "/plugins/" + project.name + "-" + version + ".jar"
        ant.move(file: buildDir.getAbsolutePath() + "/libs/" + project.name + "-" + version + ".jar", tofile: pathToServer + "/plugins/" + project.name + "-" + version + ".jar")
    }
}

